digraph "classes_Glances" {
rankdir=BT
charset="utf-8"
"glances.plugins.gpu.cards.amd.AmdGPU" [color="black", fontcolor="black", label=<{AmdGPU|device_folders : list<br ALIGN="LEFT"/>drm_root_folder : str<br ALIGN="LEFT"/>|<I>exit</I>()<br ALIGN="LEFT"/>get_device_stats()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"glances.amps.default.Amp" [color="black", fontcolor="black", label=<{Amp|AUTHOR : str<br ALIGN="LEFT"/>DESCRIPTION : str<br ALIGN="LEFT"/>EMAIL : str<br ALIGN="LEFT"/>NAME : str<br ALIGN="LEFT"/>VERSION : str<br ALIGN="LEFT"/>|update(process_list)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"glances.amps.nginx.Amp" [color="black", fontcolor="black", label=<{Amp|AUTHOR : str<br ALIGN="LEFT"/>DESCRIPTION : str<br ALIGN="LEFT"/>EMAIL : str<br ALIGN="LEFT"/>NAME : str<br ALIGN="LEFT"/>VERSION : str<br ALIGN="LEFT"/>|update(process_list)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"glances.amps.systemd.Amp" [color="black", fontcolor="black", label=<{Amp|AUTHOR : str<br ALIGN="LEFT"/>DESCRIPTION : str<br ALIGN="LEFT"/>EMAIL : str<br ALIGN="LEFT"/>NAME : str<br ALIGN="LEFT"/>VERSION : str<br ALIGN="LEFT"/>|update(process_list)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"glances.amps.systemv.Amp" [color="black", fontcolor="black", label=<{Amp|AUTHOR : str<br ALIGN="LEFT"/>DESCRIPTION : str<br ALIGN="LEFT"/>EMAIL : str<br ALIGN="LEFT"/>NAME : str<br ALIGN="LEFT"/>VERSION : str<br ALIGN="LEFT"/>|update(process_list)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"glances.amps_list.AmpsList" [color="black", fontcolor="black", label=<{AmpsList|args<br ALIGN="LEFT"/>config<br ALIGN="LEFT"/>|get()<br ALIGN="LEFT"/>getList()<br ALIGN="LEFT"/>load_configs()<br ALIGN="LEFT"/>set(new_dict)<br ALIGN="LEFT"/>update()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"glances.autodiscover.AutoDiscovered" [color="black", fontcolor="black", label=<{AutoDiscovered|<br ALIGN="LEFT"/>|add_server(name, ip, port)<br ALIGN="LEFT"/>get_servers_list()<br ALIGN="LEFT"/>remove_server(name)<br ALIGN="LEFT"/>set_server(server_pos, key, value)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"glances.outputs.glances_bars.Bar" [color="black", fontcolor="black", label=<{Bar|max_value : int<br ALIGN="LEFT"/>min_value : int<br ALIGN="LEFT"/>percent<br ALIGN="LEFT"/>post_char<br ALIGN="LEFT"/>pre_char<br ALIGN="LEFT"/>size<br ALIGN="LEFT"/>|get(overlay: str)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"glances.config.Config" [color="black", fontcolor="black", label=<{Config|config_dir : NoneType<br ALIGN="LEFT"/>config_filename : str<br ALIGN="LEFT"/>loaded_config_file<br ALIGN="LEFT"/>parser : ConfigParser<br ALIGN="LEFT"/>re_pattern<br ALIGN="LEFT"/>|as_dict()<br ALIGN="LEFT"/>config_file_paths()<br ALIGN="LEFT"/>get_bool_value(section, option, default)<br ALIGN="LEFT"/>get_float_value(section, option, default)<br ALIGN="LEFT"/>get_int_value(section, option, default)<br ALIGN="LEFT"/>get_list_value(section, option, default, separator)<br ALIGN="LEFT"/>get_value(section, option, default)<br ALIGN="LEFT"/>has_section(section)<br ALIGN="LEFT"/>items(section)<br ALIGN="LEFT"/>read()<br ALIGN="LEFT"/>sections()<br ALIGN="LEFT"/>sections_set_default()<br ALIGN="LEFT"/>set_default(section, option, default)<br ALIGN="LEFT"/>set_default_cwc(section, option_header, cwc)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"glances.plugins.containers.engines.ContainersExtension" [color="black", fontcolor="black", label=<{ContainersExtension|<br ALIGN="LEFT"/>|<I>stop</I>(): None<br ALIGN="LEFT"/><I>update</I>(all_tag): Tuple[Dict, List[Dict[str, Any]]]<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"glances.timer.Counter" [color="black", fontcolor="black", label=<{Counter|target : datetime<br ALIGN="LEFT"/>|get()<br ALIGN="LEFT"/>reset()<br ALIGN="LEFT"/>start()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"glances.cpu_percent.CpuInfo" [color="black", fontcolor="black", label=<{CpuInfo|cpu_hz : Optional[float]<br ALIGN="LEFT"/>cpu_hz_current : Optional[float]<br ALIGN="LEFT"/>cpu_name : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"glances.cpu_percent.CpuPercent" [color="black", fontcolor="black", label=<{CpuPercent|cached_timer_cpu : int<br ALIGN="LEFT"/>cached_timer_cpu_info : int<br ALIGN="LEFT"/>cpu_info<br ALIGN="LEFT"/>cpu_percent<br ALIGN="LEFT"/>percpu_percent<br ALIGN="LEFT"/>timer_cpu<br ALIGN="LEFT"/>timer_cpu_info<br ALIGN="LEFT"/>timer_percpu<br ALIGN="LEFT"/>|get_cpu(): float<br ALIGN="LEFT"/>get_info(): CpuInfo<br ALIGN="LEFT"/>get_key()<br ALIGN="LEFT"/>get_percpu(): List[PerCpuPercentInfo]<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"glances.plugins.containers.engines.docker.DockerExtension" [color="black", fontcolor="black", label=<{DockerExtension|CONTAINER_ACTIVE_STATUS : list<br ALIGN="LEFT"/>client : NoneType<br ALIGN="LEFT"/>ext_name : str<br ALIGN="LEFT"/>key<br ALIGN="LEFT"/>stats_fetchers : dict<br ALIGN="LEFT"/>|connect(): None<br ALIGN="LEFT"/>generate_stats(container): Dict[str, Any]<br ALIGN="LEFT"/>stop(): None<br ALIGN="LEFT"/>update(all_tag): Tuple[Dict, List[Dict]]<br ALIGN="LEFT"/>update_version()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"glances.plugins.containers.engines.docker.DockerStatsFetcher" [color="black", fontcolor="black", label=<{DockerStatsFetcher|MANDATORY_MEMORY_FIELDS : list<br ALIGN="LEFT"/>activity_stats<br ALIGN="LEFT"/>time_since_update<br ALIGN="LEFT"/>|stop()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"glances.exports.glances_cassandra.Export" [color="black", fontcolor="black", label=<{Export|cluster<br ALIGN="LEFT"/>export_enable : bool<br ALIGN="LEFT"/>keyspace : NoneType<br ALIGN="LEFT"/>password : NoneType<br ALIGN="LEFT"/>protocol_version : int<br ALIGN="LEFT"/>replication_factor : int<br ALIGN="LEFT"/>session<br ALIGN="LEFT"/>table : NoneType<br ALIGN="LEFT"/>username : NoneType<br ALIGN="LEFT"/>|exit()<br ALIGN="LEFT"/>export(name, columns, points)<br ALIGN="LEFT"/>init()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"glances.exports.glances_couchdb.Export" [color="black", fontcolor="black", label=<{Export|client : NoneType<br ALIGN="LEFT"/>export_enable : bool<br ALIGN="LEFT"/>|export(name, columns, points)<br ALIGN="LEFT"/>init()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"glances.exports.glances_csv.Export" [color="black", fontcolor="black", label=<{Export|csv_file<br ALIGN="LEFT"/>csv_filename<br ALIGN="LEFT"/>export_enable : bool<br ALIGN="LEFT"/>first_line : bool<br ALIGN="LEFT"/>old_header : NoneType<br ALIGN="LEFT"/>writer<br ALIGN="LEFT"/>|exit()<br ALIGN="LEFT"/><I>export</I>(name, columns, points)<br ALIGN="LEFT"/>update(stats)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"glances.exports.glances_elasticsearch.Export" [color="black", fontcolor="black", label=<{Export|client : NoneType<br ALIGN="LEFT"/>export_enable : bool<br ALIGN="LEFT"/>index : NoneType<br ALIGN="LEFT"/>|export(name, columns, points)<br ALIGN="LEFT"/>init()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"glances.exports.glances_graph.Export" [color="black", fontcolor="black", label=<{Export|export_enable : bool<br ALIGN="LEFT"/>generate_every : int<br ALIGN="LEFT"/>height : int<br ALIGN="LEFT"/>path<br ALIGN="LEFT"/>style<br ALIGN="LEFT"/>width : int<br ALIGN="LEFT"/>|exit()<br ALIGN="LEFT"/>export(title, data)<br ALIGN="LEFT"/>update(stats)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"glances.exports.glances_graphite.Export" [color="black", fontcolor="black", label=<{Export|client : NoneType<br ALIGN="LEFT"/>debug : bool<br ALIGN="LEFT"/>export_enable : bool<br ALIGN="LEFT"/>port : int<br ALIGN="LEFT"/>prefix : NoneType, str<br ALIGN="LEFT"/>system_name : NoneType<br ALIGN="LEFT"/>|export(name, columns, points)<br ALIGN="LEFT"/>init()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"glances.exports.glances_influxdb.Export" [color="black", fontcolor="black", label=<{Export|client : NoneType<br ALIGN="LEFT"/>db : NoneType<br ALIGN="LEFT"/>export_enable : bool<br ALIGN="LEFT"/>hostname : NoneType<br ALIGN="LEFT"/>password : NoneType<br ALIGN="LEFT"/>prefix : NoneType<br ALIGN="LEFT"/>protocol : str<br ALIGN="LEFT"/>tags : NoneType<br ALIGN="LEFT"/>user : NoneType<br ALIGN="LEFT"/>|export(name, columns, points)<br ALIGN="LEFT"/>init()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"glances.exports.glances_influxdb2.Export" [color="black", fontcolor="black", label=<{Export|bucket : NoneType<br ALIGN="LEFT"/>client : NoneType<br ALIGN="LEFT"/>export_enable : bool<br ALIGN="LEFT"/>hostname : NoneType<br ALIGN="LEFT"/>interval : NoneType, int<br ALIGN="LEFT"/>org : NoneType<br ALIGN="LEFT"/>prefix : NoneType<br ALIGN="LEFT"/>protocol : str<br ALIGN="LEFT"/>tags : NoneType<br ALIGN="LEFT"/>token : NoneType<br ALIGN="LEFT"/>|export(name, columns, points)<br ALIGN="LEFT"/>init()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"glances.exports.glances_json.Export" [color="black", fontcolor="black", label=<{Export|buffer : dict<br ALIGN="LEFT"/>export_enable : bool<br ALIGN="LEFT"/>json_file<br ALIGN="LEFT"/>json_filename<br ALIGN="LEFT"/>|exit()<br ALIGN="LEFT"/>export(name, columns, points)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"glances.exports.glances_kafka.Export" [color="black", fontcolor="black", label=<{Export|client : NoneType<br ALIGN="LEFT"/>compression : NoneType<br ALIGN="LEFT"/>export_enable : bool<br ALIGN="LEFT"/>tags : NoneType<br ALIGN="LEFT"/>topic : NoneType<br ALIGN="LEFT"/>|exit()<br ALIGN="LEFT"/>export(name, columns, points)<br ALIGN="LEFT"/>init()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"glances.exports.glances_mongodb.Export" [color="black", fontcolor="black", label=<{Export|client : NoneType<br ALIGN="LEFT"/>db : NoneType<br ALIGN="LEFT"/>export_enable : bool<br ALIGN="LEFT"/>password : NoneType<br ALIGN="LEFT"/>user : NoneType<br ALIGN="LEFT"/>|database()<br ALIGN="LEFT"/>export(name, columns, points)<br ALIGN="LEFT"/>init()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"glances.exports.glances_mqtt.Export" [color="black", fontcolor="black", label=<{Export|callback_api_version<br ALIGN="LEFT"/>client : NoneType<br ALIGN="LEFT"/>devicename<br ALIGN="LEFT"/>export_enable : bool<br ALIGN="LEFT"/>password : NoneType<br ALIGN="LEFT"/>port<br ALIGN="LEFT"/>tls : str<br ALIGN="LEFT"/>topic : NoneType, str<br ALIGN="LEFT"/>topic_structure<br ALIGN="LEFT"/>user : NoneType, str<br ALIGN="LEFT"/>|export(name, columns, points)<br ALIGN="LEFT"/>init()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"glances.exports.glances_opentsdb.Export" [color="black", fontcolor="black", label=<{Export|client : NoneType<br ALIGN="LEFT"/>export_enable : bool<br ALIGN="LEFT"/>prefix : NoneType, str<br ALIGN="LEFT"/>tags : NoneType<br ALIGN="LEFT"/>|exit()<br ALIGN="LEFT"/>export(name, columns, points)<br ALIGN="LEFT"/>init()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"glances.exports.glances_prometheus.Export" [color="black", fontcolor="black", label=<{Export|METRIC_SEPARATOR : str<br ALIGN="LEFT"/>export_enable : bool<br ALIGN="LEFT"/>labels : str<br ALIGN="LEFT"/>prefix : str<br ALIGN="LEFT"/>|export(name, columns, points)<br ALIGN="LEFT"/>init()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"glances.exports.glances_rabbitmq.Export" [color="black", fontcolor="black", label=<{Export|client : NoneType<br ALIGN="LEFT"/>export_enable : bool<br ALIGN="LEFT"/>hostname<br ALIGN="LEFT"/>password : NoneType<br ALIGN="LEFT"/>protocol : NoneType, str<br ALIGN="LEFT"/>queue : NoneType<br ALIGN="LEFT"/>user : NoneType<br ALIGN="LEFT"/>|export(name, columns, points)<br ALIGN="LEFT"/>init()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"glances.exports.glances_restful.Export" [color="black", fontcolor="black", label=<{Export|buffer : dict<br ALIGN="LEFT"/>client : NoneType, str<br ALIGN="LEFT"/>export_enable : bool<br ALIGN="LEFT"/>path : NoneType<br ALIGN="LEFT"/>protocol : NoneType<br ALIGN="LEFT"/>|export(name, columns, points)<br ALIGN="LEFT"/>init()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"glances.exports.glances_riemann.Export" [color="black", fontcolor="black", label=<{Export|client : NoneType<br ALIGN="LEFT"/>export_enable : bool<br ALIGN="LEFT"/>hostname<br ALIGN="LEFT"/>|export(name, columns, points)<br ALIGN="LEFT"/>init()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"glances.exports.glances_statsd.Export" [color="black", fontcolor="black", label=<{Export|client : NoneType<br ALIGN="LEFT"/>export_enable : bool<br ALIGN="LEFT"/>prefix : NoneType, str<br ALIGN="LEFT"/>|export(name, columns, points)<br ALIGN="LEFT"/>init()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"glances.exports.glances_zeromq.Export" [color="black", fontcolor="black", label=<{Export|client : NoneType<br ALIGN="LEFT"/>context : NoneType<br ALIGN="LEFT"/>export_enable : bool<br ALIGN="LEFT"/>prefix : NoneType<br ALIGN="LEFT"/>|exit()<br ALIGN="LEFT"/>export(name, columns, points)<br ALIGN="LEFT"/>init()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"glances.folder_list.FolderList" [color="black", fontcolor="black", label=<{FolderList|config<br ALIGN="LEFT"/>first_grab : bool<br ALIGN="LEFT"/>timer_folders : list<br ALIGN="LEFT"/>|careful(item)<br ALIGN="LEFT"/>critical(item)<br ALIGN="LEFT"/>get()<br ALIGN="LEFT"/>getAll()<br ALIGN="LEFT"/>path(item)<br ALIGN="LEFT"/>set(new_list)<br ALIGN="LEFT"/>setAll(new_list)<br ALIGN="LEFT"/>update(key)<br ALIGN="LEFT"/>warning(item)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"glances.actions.GlancesActions" [color="black", fontcolor="black", label=<{GlancesActions|start_timer<br ALIGN="LEFT"/>status : dict<br ALIGN="LEFT"/>|get(stat_name)<br ALIGN="LEFT"/>run(stat_name, criticality, commands, repeat, mustache_dict)<br ALIGN="LEFT"/>set(stat_name, criticality)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"glances.amps.amp.GlancesAmp" [color="black", fontcolor="black", label=<{GlancesAmp|AUTHOR : str<br ALIGN="LEFT"/>DESCRIPTION : str<br ALIGN="LEFT"/>EMAIL : str<br ALIGN="LEFT"/>NAME : str<br ALIGN="LEFT"/>VERSION : str<br ALIGN="LEFT"/>amp_name : str<br ALIGN="LEFT"/>args : NoneType<br ALIGN="LEFT"/>configs : dict<br ALIGN="LEFT"/>timer<br ALIGN="LEFT"/>|count()<br ALIGN="LEFT"/>count_max()<br ALIGN="LEFT"/>count_min()<br ALIGN="LEFT"/>enable()<br ALIGN="LEFT"/>get(key)<br ALIGN="LEFT"/>load_config(config)<br ALIGN="LEFT"/>one_line()<br ALIGN="LEFT"/>refresh()<br ALIGN="LEFT"/>regex()<br ALIGN="LEFT"/>result()<br ALIGN="LEFT"/>set_count(count)<br ALIGN="LEFT"/>set_result(result, separator)<br ALIGN="LEFT"/>should_update()<br ALIGN="LEFT"/>time_until_refresh()<br ALIGN="LEFT"/>update_wrapper(process_list)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"glances.attribute.GlancesAttribute" [color="black", fontcolor="black", label=<{GlancesAttribute|description<br ALIGN="LEFT"/>history<br ALIGN="LEFT"/>name<br ALIGN="LEFT"/>value<br ALIGN="LEFT"/>|history_add(value)<br ALIGN="LEFT"/>history_json(nb)<br ALIGN="LEFT"/>history_len()<br ALIGN="LEFT"/>history_mean(nb)<br ALIGN="LEFT"/>history_raw(nb)<br ALIGN="LEFT"/>history_reset()<br ALIGN="LEFT"/>history_size()<br ALIGN="LEFT"/>history_value(pos)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"glances.autodiscover.GlancesAutoDiscoverClient" [color="black", fontcolor="black", label=<{GlancesAutoDiscoverClient|info<br ALIGN="LEFT"/>zeroconf<br ALIGN="LEFT"/>|close()<br ALIGN="LEFT"/>find_active_ip_address()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"glances.autodiscover.GlancesAutoDiscoverListener" [color="black", fontcolor="black", label=<{GlancesAutoDiscoverListener|servers<br ALIGN="LEFT"/>|add_service(zeroconf, srv_type, srv_name)<br ALIGN="LEFT"/>get_servers_list()<br ALIGN="LEFT"/>remove_service(zeroconf, srv_type, srv_name)<br ALIGN="LEFT"/>set_server(server_pos, key, value)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"glances.autodiscover.GlancesAutoDiscoverServer" [color="black", fontcolor="black", label=<{GlancesAutoDiscoverServer|browser<br ALIGN="LEFT"/>listener<br ALIGN="LEFT"/>zeroconf<br ALIGN="LEFT"/>zeroconf_enable_tag : bool<br ALIGN="LEFT"/>|close()<br ALIGN="LEFT"/>get_servers_list()<br ALIGN="LEFT"/>set_server(server_pos, key, value)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"glances.client.GlancesClient" [color="black", fontcolor="black", label=<{GlancesClient|args : NoneType<br ALIGN="LEFT"/>client : ServerProxy<br ALIGN="LEFT"/>client_mode<br ALIGN="LEFT"/>config : NoneType<br ALIGN="LEFT"/>quiet<br ALIGN="LEFT"/>refresh_time<br ALIGN="LEFT"/>return_to_browser : bool<br ALIGN="LEFT"/>screen<br ALIGN="LEFT"/>stats<br ALIGN="LEFT"/>uri : str<br ALIGN="LEFT"/>|end()<br ALIGN="LEFT"/>log_and_exit(msg)<br ALIGN="LEFT"/>login()<br ALIGN="LEFT"/>serve_forever()<br ALIGN="LEFT"/>update()<br ALIGN="LEFT"/>update_glances()<br ALIGN="LEFT"/>update_snmp()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"glances.client_browser.GlancesClientBrowser" [color="black", fontcolor="black", label=<{GlancesClientBrowser|args : NoneType<br ALIGN="LEFT"/>autodiscover_server : NoneType<br ALIGN="LEFT"/>config : NoneType<br ALIGN="LEFT"/>password : NoneType<br ALIGN="LEFT"/>screen<br ALIGN="LEFT"/>static_server : NoneType<br ALIGN="LEFT"/>|end()<br ALIGN="LEFT"/>get_servers_list()<br ALIGN="LEFT"/>load()<br ALIGN="LEFT"/>serve_forever()<br ALIGN="LEFT"/>set_in_selected(key, value)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"glances.client.GlancesClientTransport" [color="black", fontcolor="black", label=<{GlancesClientTransport|timeout<br ALIGN="LEFT"/>|set_timeout(timeout)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"glances.outputs.glances_colors.GlancesColors" [color="black", fontcolor="black", label=<{GlancesColors|A_BOLD : int<br ALIGN="LEFT"/>CAREFUL : int<br ALIGN="LEFT"/>CAREFUL_LOG : int<br ALIGN="LEFT"/>CPU_TIME : int<br ALIGN="LEFT"/>CRITICAL : int<br ALIGN="LEFT"/>CRITICAL_LOG : int<br ALIGN="LEFT"/>DEFAULT : int<br ALIGN="LEFT"/>FILTER : int<br ALIGN="LEFT"/>INFO : int<br ALIGN="LEFT"/>NICE : int<br ALIGN="LEFT"/>OK : int<br ALIGN="LEFT"/>OK_LOG : int<br ALIGN="LEFT"/>SELECTED : int<br ALIGN="LEFT"/>SEPARATOR : int<br ALIGN="LEFT"/>WARNING : int<br ALIGN="LEFT"/>WARNING_LOG : int<br ALIGN="LEFT"/>args<br ALIGN="LEFT"/>|get(): dict<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"glances.outputs.glances_curses_browser.GlancesCursesBrowser" [color="black", fontcolor="black", label=<{GlancesCursesBrowser|active_server<br ALIGN="LEFT"/>cursor<br ALIGN="LEFT"/>cursor_position : int<br ALIGN="LEFT"/>first_scan : bool<br ALIGN="LEFT"/>is_end : bool<br ALIGN="LEFT"/>pressedkey<br ALIGN="LEFT"/>|cursor_down(stats)<br ALIGN="LEFT"/>cursor_pagedown(stats)<br ALIGN="LEFT"/>cursor_pageup(stats)<br ALIGN="LEFT"/>cursor_up(stats)<br ALIGN="LEFT"/>display(stats, cs_status)<br ALIGN="LEFT"/>flush(stats)<br ALIGN="LEFT"/>get_pagelines(stats)<br ALIGN="LEFT"/>update(stats, duration, cs_status, return_to_browser)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"glances.outputs.glances_curses.GlancesCursesClient" [color="black", fontcolor="black", label=<{GlancesCursesClient|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"glances.outputs.glances_curses.GlancesCursesStandalone" [color="black", fontcolor="black", label=<{GlancesCursesStandalone|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"glances.event.GlancesEvent" [color="black", fontcolor="black", label=<{GlancesEvent|avg : float<br ALIGN="LEFT"/>begin : int<br ALIGN="LEFT"/>count : int<br ALIGN="LEFT"/>desc : str<br ALIGN="LEFT"/>end : int<br ALIGN="LEFT"/>global_msg : str<br ALIGN="LEFT"/>max : float<br ALIGN="LEFT"/>min : float<br ALIGN="LEFT"/>sort : str<br ALIGN="LEFT"/>state : str<br ALIGN="LEFT"/>sum : float<br ALIGN="LEFT"/>top : list<br ALIGN="LEFT"/>type : str<br ALIGN="LEFT"/>|is_finished()<br ALIGN="LEFT"/>is_ongoing()<br ALIGN="LEFT"/>update(state: str, value: float, sort_key: str, proc_list: list, proc_desc: str, global_msg: str)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"glances.events_list.GlancesEventsList" [color="black", fontcolor="black", label=<{GlancesEventsList|events_list : list<br ALIGN="LEFT"/>max_events<br ALIGN="LEFT"/>min_duration<br ALIGN="LEFT"/>min_interval<br ALIGN="LEFT"/>|add(event_state, event_type, event_value, proc_list, proc_desc)<br ALIGN="LEFT"/>clean(critical)<br ALIGN="LEFT"/>get()<br ALIGN="LEFT"/>get_event_sort_key(event_type)<br ALIGN="LEFT"/>len()<br ALIGN="LEFT"/>reset_process_sort()<br ALIGN="LEFT"/>set_max_events(max_events)<br ALIGN="LEFT"/>set_min_duration(min_duration)<br ALIGN="LEFT"/>set_min_interval(min_interval)<br ALIGN="LEFT"/>set_process_sort(event_type)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"glances.exports.export.GlancesExport" [color="black", fontcolor="black", label=<{GlancesExport|args : NoneType<br ALIGN="LEFT"/>config : NoneType<br ALIGN="LEFT"/>export_enable : bool<br ALIGN="LEFT"/>export_name : str<br ALIGN="LEFT"/>host : NoneType<br ALIGN="LEFT"/>non_exportable_plugins : list<br ALIGN="LEFT"/>port : NoneType<br ALIGN="LEFT"/>|build_export(stats)<br ALIGN="LEFT"/>exit()<br ALIGN="LEFT"/><I>export</I>(name, columns, points)<br ALIGN="LEFT"/>get_item_key(item)<br ALIGN="LEFT"/>last_exported_list()<br ALIGN="LEFT"/>load_conf(section, mandatories, options)<br ALIGN="LEFT"/>parse_tags(tags)<br ALIGN="LEFT"/>plugins_to_export(stats)<br ALIGN="LEFT"/>update(stats)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"glances.filter.GlancesFilter" [color="black", fontcolor="black", label=<{GlancesFilter|filter<br ALIGN="LEFT"/>filter_input<br ALIGN="LEFT"/>filter_key<br ALIGN="LEFT"/>filter_re<br ALIGN="LEFT"/>|is_filtered(process)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"glances.filter.GlancesFilterList" [color="black", fontcolor="black", label=<{GlancesFilterList|filter<br ALIGN="LEFT"/>|is_filtered(process)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"glances.plugins.sensors.sensor.glances_batpercent.GlancesGrabBat" [color="black", fontcolor="black", label=<{GlancesGrabBat|bat : NoneType<br ALIGN="LEFT"/>bat_list : list<br ALIGN="LEFT"/>battery_percent<br ALIGN="LEFT"/>|get()<br ALIGN="LEFT"/>update()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"glances.plugins.sensors.sensor.glances_hddtemp.GlancesGrabHDDTemp" [color="black", fontcolor="black", label=<{GlancesGrabHDDTemp|args : NoneType<br ALIGN="LEFT"/>cache : bytes, str<br ALIGN="LEFT"/>hddtemp_list : list<br ALIGN="LEFT"/>host : str<br ALIGN="LEFT"/>port : int<br ALIGN="LEFT"/>|fetch()<br ALIGN="LEFT"/>get()<br ALIGN="LEFT"/>reset()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"glances.plugins.sensors.GlancesGrabSensors" [color="black", fontcolor="black", label=<{GlancesGrabSensors|init : bool<br ALIGN="LEFT"/>sensor_type : Literal[SensorType.FAN_SPEED, SensorType.CPU_TEMP]<br ALIGN="LEFT"/>sensor_unit : str<br ALIGN="LEFT"/>|update(): List[dict]<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"glances.history.GlancesHistory" [color="black", fontcolor="black", label=<{GlancesHistory|stats_history : dict<br ALIGN="LEFT"/>|add(key, value, description, history_max_size)<br ALIGN="LEFT"/>get(nb)<br ALIGN="LEFT"/>get_json(nb)<br ALIGN="LEFT"/>reset()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"glances.plugins.irq.GlancesIRQ" [color="black", fontcolor="black", label=<{GlancesIRQ|IRQ_FILE : str<br ALIGN="LEFT"/>cpu_number : int<br ALIGN="LEFT"/>lasts : dict<br ALIGN="LEFT"/>stats : list<br ALIGN="LEFT"/>|get()<br ALIGN="LEFT"/>get_key()<br ALIGN="LEFT"/>reset()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"glances.server.GlancesInstance" [color="black", fontcolor="black", label=<{GlancesInstance|cached_time<br ALIGN="LEFT"/>stats<br ALIGN="LEFT"/>timer<br ALIGN="LEFT"/>|getAll()<br ALIGN="LEFT"/>getAllLimits()<br ALIGN="LEFT"/>getAllPlugins()<br ALIGN="LEFT"/>getAllViews()<br ALIGN="LEFT"/>getPlugin(plugin)<br ALIGN="LEFT"/>getPluginView(plugin)<br ALIGN="LEFT"/>init()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"glances.outputs.glances_restful_api.GlancesJSONResponse" [color="black", fontcolor="black", label=<{GlancesJSONResponse|<br ALIGN="LEFT"/>|render(content: Any): bytes<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"glances.main.GlancesMain" [color="black", fontcolor="black", label=<{GlancesMain|DEFAULT_REFRESH_TIME : int<br ALIGN="LEFT"/>args : Namespace, NoneType<br ALIGN="LEFT"/>cached_time : int<br ALIGN="LEFT"/>client_tag : bool<br ALIGN="LEFT"/>config<br ALIGN="LEFT"/>example_of_use : str<br ALIGN="LEFT"/>password : str<br ALIGN="LEFT"/>server_port : int<br ALIGN="LEFT"/>username : str<br ALIGN="LEFT"/>web_server_port : int<br ALIGN="LEFT"/>|check_mode_compatibility()<br ALIGN="LEFT"/>get_args()<br ALIGN="LEFT"/>get_config()<br ALIGN="LEFT"/>get_mode()<br ALIGN="LEFT"/>init_args()<br ALIGN="LEFT"/>init_client_server(args)<br ALIGN="LEFT"/>init_debug(args)<br ALIGN="LEFT"/>init_plugins(args)<br ALIGN="LEFT"/>init_refresh_rate(args)<br ALIGN="LEFT"/>init_ui_mode(args)<br ALIGN="LEFT"/>is_client()<br ALIGN="LEFT"/>is_client_browser()<br ALIGN="LEFT"/>is_server()<br ALIGN="LEFT"/>is_standalone()<br ALIGN="LEFT"/>is_webserver()<br ALIGN="LEFT"/>parse_args()<br ALIGN="LEFT"/>version_msg()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"glances.password.GlancesPassword" [color="black", fontcolor="black", label=<{GlancesPassword|config : NoneType<br ALIGN="LEFT"/>password_dir<br ALIGN="LEFT"/>password_file : str<br ALIGN="LEFT"/>password_filename : str<br ALIGN="LEFT"/>username : str<br ALIGN="LEFT"/>|check_password(hashed_password, plain_password)<br ALIGN="LEFT"/>get_hash(plain_password, salt)<br ALIGN="LEFT"/>get_password(description, confirm, clear)<br ALIGN="LEFT"/>hash_password(plain_password)<br ALIGN="LEFT"/>load_password()<br ALIGN="LEFT"/>local_password_path()<br ALIGN="LEFT"/>save_password(hashed_password)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"glances.password_list.GlancesPasswordList" [color="black", fontcolor="black", label=<{GlancesPasswordList|<br ALIGN="LEFT"/>|get_password(host)<br ALIGN="LEFT"/>load(config)<br ALIGN="LEFT"/>set_password(host, password)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"glances.plugins.plugin.model.GlancesPluginModel" [color="black", fontcolor="black", label=<{GlancesPluginModel|actions<br ALIGN="LEFT"/>alias : dict<br ALIGN="LEFT"/>align<br ALIGN="LEFT"/>args : NoneType<br ALIGN="LEFT"/>fields_description : NoneType<br ALIGN="LEFT"/>hide_zero : bool<br ALIGN="LEFT"/>hide_zero_fields : list<br ALIGN="LEFT"/>input_method<br ALIGN="LEFT"/>items_history_list : NoneType<br ALIGN="LEFT"/>limits<br ALIGN="LEFT"/>plugin_name<br ALIGN="LEFT"/>refresh_timer<br ALIGN="LEFT"/>short_system_name<br ALIGN="LEFT"/>stats : NoneType<br ALIGN="LEFT"/>stats_history<br ALIGN="LEFT"/>stats_init_value : dict<br ALIGN="LEFT"/>stats_previous : NoneType<br ALIGN="LEFT"/>time_since_last_update : NoneType<br ALIGN="LEFT"/>views : dict<br ALIGN="LEFT"/>|auto_unit(number, low_precision, min_symbol, none_symbol)<br ALIGN="LEFT"/>curse_add_line(msg, decoration, optional, additional, splittable)<br ALIGN="LEFT"/>curse_add_stat(key, width, header, display_key, separator, trailer)<br ALIGN="LEFT"/>curse_new_line()<br ALIGN="LEFT"/>exit()<br ALIGN="LEFT"/>filter_stats(stats)<br ALIGN="LEFT"/>get_alert(current, minimum, maximum, highlight_zero, is_max, header, action_key, log)<br ALIGN="LEFT"/>get_alert_log(current, minimum, maximum, header, action_key)<br ALIGN="LEFT"/>get_conf_value(value, header, plugin_name, default)<br ALIGN="LEFT"/>get_export()<br ALIGN="LEFT"/>get_export_history(item)<br ALIGN="LEFT"/>get_init_value()<br ALIGN="LEFT"/>get_item_info(item, key, default)<br ALIGN="LEFT"/>get_items_history_list()<br ALIGN="LEFT"/>get_json()<br ALIGN="LEFT"/>get_json_views(item, key, option)<br ALIGN="LEFT"/>get_key()<br ALIGN="LEFT"/>get_limit(criticality, stat_name)<br ALIGN="LEFT"/>get_limit_action(criticality, stat_name)<br ALIGN="LEFT"/>get_limit_log(stat_name, default_action)<br ALIGN="LEFT"/>get_limits(item)<br ALIGN="LEFT"/>get_raw()<br ALIGN="LEFT"/>get_raw_history(item, nb)<br ALIGN="LEFT"/>get_raw_stats_item(item)<br ALIGN="LEFT"/>get_raw_stats_value(item, value)<br ALIGN="LEFT"/>get_refresh()<br ALIGN="LEFT"/>get_refresh_time()<br ALIGN="LEFT"/>get_stat_name(header)<br ALIGN="LEFT"/>get_stats()<br ALIGN="LEFT"/>get_stats_action()<br ALIGN="LEFT"/>get_stats_display(args, max_width)<br ALIGN="LEFT"/>get_stats_history(item, nb)<br ALIGN="LEFT"/>get_stats_item(item)<br ALIGN="LEFT"/>get_stats_snmp(bulk, snmp_oid)<br ALIGN="LEFT"/>get_stats_value(item, value)<br ALIGN="LEFT"/>get_trend(item, nb)<br ALIGN="LEFT"/>get_views(item, key, option)<br ALIGN="LEFT"/>has_alias(header)<br ALIGN="LEFT"/>history_enable()<br ALIGN="LEFT"/>init_stats_history()<br ALIGN="LEFT"/>is_disabled(plugin_name)<br ALIGN="LEFT"/>is_display(value, header)<br ALIGN="LEFT"/>is_enabled(plugin_name)<br ALIGN="LEFT"/>is_hide(value, header)<br ALIGN="LEFT"/>is_limit(criticality, stat_name)<br ALIGN="LEFT"/>is_show(value, header)<br ALIGN="LEFT"/>load_limits(config)<br ALIGN="LEFT"/>manage_action(stat_name, trigger, header, action_key)<br ALIGN="LEFT"/>manage_threshold(stat_name, trigger)<br ALIGN="LEFT"/>msg_curse(args, max_width)<br ALIGN="LEFT"/>read_alias()<br ALIGN="LEFT"/>reset()<br ALIGN="LEFT"/>reset_stats_history()<br ALIGN="LEFT"/>reset_views()<br ALIGN="LEFT"/>set_limits(item, value)<br ALIGN="LEFT"/>set_refresh(value)<br ALIGN="LEFT"/>set_stats(input_stats)<br ALIGN="LEFT"/>set_views(input_views)<br ALIGN="LEFT"/>sorted_stats()<br ALIGN="LEFT"/>trend_msg(trend, significant)<br ALIGN="LEFT"/>update_stats_history()<br ALIGN="LEFT"/>update_views()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"glances.ports_list.GlancesPortsList" [color="black", fontcolor="black", label=<{GlancesPortsList|<br ALIGN="LEFT"/>|get_ports_list()<br ALIGN="LEFT"/>load(config)<br ALIGN="LEFT"/>set_server(pos, key, value)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"glances.processes.GlancesProcesses" [color="black", fontcolor="black", label=<{GlancesProcesses|args : NoneType<br ALIGN="LEFT"/>auto_sort : NoneType, bool<br ALIGN="LEFT"/>cache_timeout : int<br ALIGN="LEFT"/>cache_timer<br ALIGN="LEFT"/>disable_extended_tag : bool<br ALIGN="LEFT"/>disable_gids : bool<br ALIGN="LEFT"/>disable_io_counters : bool<br ALIGN="LEFT"/>disable_tag : bool<br ALIGN="LEFT"/>export_process_filter<br ALIGN="LEFT"/>extended_process : NoneType<br ALIGN="LEFT"/>io_old : dict<br ALIGN="LEFT"/>max_processes<br ALIGN="LEFT"/>no_kernel_threads : bool<br ALIGN="LEFT"/>pid_max<br ALIGN="LEFT"/>process_filter<br ALIGN="LEFT"/>process_filter_input<br ALIGN="LEFT"/>process_filter_key<br ALIGN="LEFT"/>process_filter_re<br ALIGN="LEFT"/>processcount : dict<br ALIGN="LEFT"/>processes_count<br ALIGN="LEFT"/>processlist : list<br ALIGN="LEFT"/>processlist_cache : dict<br ALIGN="LEFT"/>processlist_export : list<br ALIGN="LEFT"/>sort_key<br ALIGN="LEFT"/>sort_reverse<br ALIGN="LEFT"/>|disable()<br ALIGN="LEFT"/>disable_extended()<br ALIGN="LEFT"/>disable_kernel_threads()<br ALIGN="LEFT"/>enable()<br ALIGN="LEFT"/>enable_extended()<br ALIGN="LEFT"/>get_count()<br ALIGN="LEFT"/>get_export()<br ALIGN="LEFT"/>get_extended_stats(proc)<br ALIGN="LEFT"/>get_list(sorted_by, as_programs)<br ALIGN="LEFT"/>get_max_values(key)<br ALIGN="LEFT"/>is_selected_extended_process(position)<br ALIGN="LEFT"/>kill(pid, timeout)<br ALIGN="LEFT"/>max_values()<br ALIGN="LEFT"/>nice_decrease(pid)<br ALIGN="LEFT"/>nice_increase(pid)<br ALIGN="LEFT"/>reset_internal_cache()<br ALIGN="LEFT"/>reset_max_values()<br ALIGN="LEFT"/>reset_processcount()<br ALIGN="LEFT"/>set_args(args)<br ALIGN="LEFT"/>set_max_values(key, value)<br ALIGN="LEFT"/>set_sort_key(key, auto)<br ALIGN="LEFT"/>update()<br ALIGN="LEFT"/>update_export_list(processlist)<br ALIGN="LEFT"/>update_list(processlist)<br ALIGN="LEFT"/>update_processcount(plist)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"glances.outputs.glances_restful_api.GlancesRestfulApi" [color="black", fontcolor="black", label=<{GlancesRestfulApi|API_VERSION : str<br ALIGN="LEFT"/>STATIC_PATH : str<br ALIGN="LEFT"/>TEMPLATE_PATH : str<br ALIGN="LEFT"/>args : NoneType<br ALIGN="LEFT"/>bind_url : str<br ALIGN="LEFT"/>config : NoneType<br ALIGN="LEFT"/>plugins_list<br ALIGN="LEFT"/>stats : NoneType<br ALIGN="LEFT"/>timer<br ALIGN="LEFT"/>url_prefix : str<br ALIGN="LEFT"/>uvicorn_server : NoneType<br ALIGN="LEFT"/>|authentication(creds: Annotated[HTTPBasicCredentials, Depends(security)])<br ALIGN="LEFT"/>end()<br ALIGN="LEFT"/>load_config(config)<br ALIGN="LEFT"/>start(stats: GlancesStats): None<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"glances.snmp.GlancesSNMPClient" [color="black", fontcolor="black", label=<{GlancesSNMPClient|auth : str<br ALIGN="LEFT"/>cmdGen<br ALIGN="LEFT"/>community : str<br ALIGN="LEFT"/>host : str<br ALIGN="LEFT"/>port : int<br ALIGN="LEFT"/>user : str<br ALIGN="LEFT"/>version : str<br ALIGN="LEFT"/>|get_by_oid()<br ALIGN="LEFT"/>getbulk_by_oid(non_repeaters, max_repetitions)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"glances.server.GlancesServer" [color="black", fontcolor="black", label=<{GlancesServer|args : NoneType<br ALIGN="LEFT"/>autodiscover_client<br ALIGN="LEFT"/>server<br ALIGN="LEFT"/>|add_user(username, password)<br ALIGN="LEFT"/>end()<br ALIGN="LEFT"/>serve_forever()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"glances.standalone.GlancesStandalone" [color="black", fontcolor="black", label=<{GlancesStandalone|args : NoneType<br ALIGN="LEFT"/>config : NoneType<br ALIGN="LEFT"/>outdated<br ALIGN="LEFT"/>quiet<br ALIGN="LEFT"/>refresh_time<br ALIGN="LEFT"/>screen<br ALIGN="LEFT"/>stats<br ALIGN="LEFT"/>|display_modules_list()<br ALIGN="LEFT"/>end()<br ALIGN="LEFT"/>serve_forever()<br ALIGN="LEFT"/>serve_issue()<br ALIGN="LEFT"/>serve_n(n)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"glances.static_list.GlancesStaticServer" [color="black", fontcolor="black", label=<{GlancesStaticServer|<br ALIGN="LEFT"/>|get_columns()<br ALIGN="LEFT"/>get_servers_list()<br ALIGN="LEFT"/>load_columns(config)<br ALIGN="LEFT"/>load_server_list(config)<br ALIGN="LEFT"/>set_server(server_pos, key, value)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"glances.stats.GlancesStats" [color="black", fontcolor="black", label=<{GlancesStats|args : NoneType<br ALIGN="LEFT"/>config : NoneType<br ALIGN="LEFT"/>first_export : bool<br ALIGN="LEFT"/>header : str<br ALIGN="LEFT"/>|end()<br ALIGN="LEFT"/>export(input_stats)<br ALIGN="LEFT"/>getAll()<br ALIGN="LEFT"/>getAllAsDict(plugin_list)<br ALIGN="LEFT"/>getAllExports(plugin_list)<br ALIGN="LEFT"/>getAllExportsAsDict(plugin_list)<br ALIGN="LEFT"/>getAllLimits(plugin_list)<br ALIGN="LEFT"/>getAllLimitsAsDict(plugin_list)<br ALIGN="LEFT"/>getAllViews(plugin_list)<br ALIGN="LEFT"/>getAllViewsAsDict(plugin_list)<br ALIGN="LEFT"/>getExportsList(enable)<br ALIGN="LEFT"/>getPluginsList(enable)<br ALIGN="LEFT"/>get_plugin(plugin_name)<br ALIGN="LEFT"/>get_plugin_view(plugin_name)<br ALIGN="LEFT"/>load_additional_plugins(args, config)<br ALIGN="LEFT"/>load_exports(args)<br ALIGN="LEFT"/>load_limits(config)<br ALIGN="LEFT"/>load_modules(args)<br ALIGN="LEFT"/>load_plugins(args)<br ALIGN="LEFT"/>update()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"glances.stats_client.GlancesStatsClient" [color="black", fontcolor="black", label=<{GlancesStatsClient|args : NoneType<br ALIGN="LEFT"/>config : NoneType<br ALIGN="LEFT"/>|set_plugins(input_plugins)<br ALIGN="LEFT"/>update(input_stats)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"glances.stats_client_snmp.GlancesStatsClientSNMP" [color="black", fontcolor="black", label=<{GlancesStatsClientSNMP|args : NoneType<br ALIGN="LEFT"/>config : NoneType<br ALIGN="LEFT"/>os_name : NoneType<br ALIGN="LEFT"/>system_name : NoneType<br ALIGN="LEFT"/>|check_snmp()<br ALIGN="LEFT"/>get_system_name(oid_system_name)<br ALIGN="LEFT"/>update()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"glances.stats_server.GlancesStatsServer" [color="black", fontcolor="black", label=<{GlancesStatsServer|all_stats : defaultdict<br ALIGN="LEFT"/>|getAll()<br ALIGN="LEFT"/>update(input_stats)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"glances.outputs.glances_stdout.GlancesStdout" [color="black", fontcolor="black", label=<{GlancesStdout|args : NoneType<br ALIGN="LEFT"/>config : NoneType<br ALIGN="LEFT"/>plugins_list : list<br ALIGN="LEFT"/>|build_list()<br ALIGN="LEFT"/><I>end</I>()<br ALIGN="LEFT"/>update(stats, duration)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"glances.outputs.glances_stdout_apidoc.GlancesStdoutApiDoc" [color="black", fontcolor="black", label=<{GlancesStdoutApiDoc|args : NoneType<br ALIGN="LEFT"/>config : NoneType<br ALIGN="LEFT"/>|<I>end</I>()<br ALIGN="LEFT"/>update(stats, duration)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"glances.outputs.glances_stdout_csv.GlancesStdoutCsv" [color="black", fontcolor="black", label=<{GlancesStdoutCsv|args : NoneType<br ALIGN="LEFT"/>config : NoneType<br ALIGN="LEFT"/>header : bool<br ALIGN="LEFT"/>na : str<br ALIGN="LEFT"/>plugins_list : list<br ALIGN="LEFT"/>separator : str<br ALIGN="LEFT"/>|build_data(plugin, attribute, stat)<br ALIGN="LEFT"/>build_header(plugin, attribute, stat)<br ALIGN="LEFT"/>build_list()<br ALIGN="LEFT"/><I>end</I>()<br ALIGN="LEFT"/>update(stats, duration)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"glances.outputs.glances_stdout_issue.GlancesStdoutIssue" [color="black", fontcolor="black", label=<{GlancesStdoutIssue|args : NoneType<br ALIGN="LEFT"/>config : NoneType<br ALIGN="LEFT"/>|<I>end</I>()<br ALIGN="LEFT"/>print_issue(plugin, result, message)<br ALIGN="LEFT"/>print_version()<br ALIGN="LEFT"/>update(stats, duration)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"glances.outputs.glances_stdout_json.GlancesStdoutJson" [color="black", fontcolor="black", label=<{GlancesStdoutJson|args : NoneType<br ALIGN="LEFT"/>config : NoneType<br ALIGN="LEFT"/>plugins_list<br ALIGN="LEFT"/>|build_list()<br ALIGN="LEFT"/><I>end</I>()<br ALIGN="LEFT"/>update(stats, duration)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"glances.outputs.glances_curses.GlancesTextbox" [color="black", fontcolor="black", label=<{GlancesTextbox|<br ALIGN="LEFT"/>|do_command(ch)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"glances.outputs.glances_curses.GlancesTextboxYesNo" [color="black", fontcolor="black", label=<{GlancesTextboxYesNo|<br ALIGN="LEFT"/>|do_command(ch)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"glances.thresholds.GlancesThresholdCareful" [color="black", fontcolor="black", label=<{GlancesThresholdCareful|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"glances.thresholds.GlancesThresholdCritical" [color="black", fontcolor="black", label=<{GlancesThresholdCritical|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"glances.thresholds.GlancesThresholdOk" [color="black", fontcolor="black", label=<{GlancesThresholdOk|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"glances.thresholds.GlancesThresholdWarning" [color="black", fontcolor="black", label=<{GlancesThresholdWarning|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"glances.thresholds.GlancesThresholds" [color="black", fontcolor="black", label=<{GlancesThresholds|current_module<br ALIGN="LEFT"/>threshold_list : list<br ALIGN="LEFT"/>|add(stat_name, threshold_description)<br ALIGN="LEFT"/>get(stat_name)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"glances.outputs.glances_restful_api.GlancesUvicornServer" [color="black", fontcolor="black", label=<{GlancesUvicornServer|should_exit : bool<br ALIGN="LEFT"/>|<I>install_signal_handlers</I>()<br ALIGN="LEFT"/>run_in_thread(timeout)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"glances.web_list.GlancesWebList" [color="black", fontcolor="black", label=<{GlancesWebList|<br ALIGN="LEFT"/>|get_web_list()<br ALIGN="LEFT"/>load(config)<br ALIGN="LEFT"/>set_server(pos, key, value)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"glances.webserver.GlancesWebServer" [color="black", fontcolor="black", label=<{GlancesWebServer|stats<br ALIGN="LEFT"/>web<br ALIGN="LEFT"/>|end()<br ALIGN="LEFT"/>serve_forever()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"glances.server.GlancesXMLRPCHandler" [color="black", fontcolor="black", label=<{GlancesXMLRPCHandler|rpc_paths : tuple<br ALIGN="LEFT"/>|authenticate(headers)<br ALIGN="LEFT"/>check_user(username, password)<br ALIGN="LEFT"/>end_headers()<br ALIGN="LEFT"/><I>log_message</I>(log_format)<br ALIGN="LEFT"/>parse_request()<br ALIGN="LEFT"/>send_my_headers()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"glances.server.GlancesXMLRPCServer" [color="black", fontcolor="black", label=<{GlancesXMLRPCServer|address_family<br ALIGN="LEFT"/>bind_address<br ALIGN="LEFT"/>bind_port : int<br ALIGN="LEFT"/>config : NoneType<br ALIGN="LEFT"/>finished : bool<br ALIGN="LEFT"/>isAuth : bool<br ALIGN="LEFT"/>user_dict : dict<br ALIGN="LEFT"/>|end()<br ALIGN="LEFT"/>serve_forever()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"glances.plugins.gpu.cards.nvidia.NvidiaGPU" [color="black", fontcolor="black", label=<{NvidiaGPU|device_handles : list<br ALIGN="LEFT"/>|exit()<br ALIGN="LEFT"/>get_device_stats()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"glances.outdated.Outdated" [color="black", fontcolor="black", label=<{Outdated|args<br ALIGN="LEFT"/>cache_dir : str<br ALIGN="LEFT"/>cache_file : str<br ALIGN="LEFT"/>config<br ALIGN="LEFT"/>data : dict<br ALIGN="LEFT"/>|get_pypi_version()<br ALIGN="LEFT"/>installed_version()<br ALIGN="LEFT"/>is_outdated()<br ALIGN="LEFT"/>latest_version()<br ALIGN="LEFT"/>load_config(config)<br ALIGN="LEFT"/>refresh_date()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"glances.cpu_percent.PerCpuPercentInfo" [color="black", fontcolor="black", label=<{PerCpuPercentInfo|cpu_number : int<br ALIGN="LEFT"/>dpc : Optional[float]<br ALIGN="LEFT"/>guest : Optional[float]<br ALIGN="LEFT"/>guest_nice : Optional[float]<br ALIGN="LEFT"/>idle : float<br ALIGN="LEFT"/>interrupt : Optional[float]<br ALIGN="LEFT"/>iowait : Optional[float]<br ALIGN="LEFT"/>irq : Optional[float]<br ALIGN="LEFT"/>key : str<br ALIGN="LEFT"/>nice : Optional[float]<br ALIGN="LEFT"/>softirq : Optional[float]<br ALIGN="LEFT"/>steal : Optional[float]<br ALIGN="LEFT"/>system : float<br ALIGN="LEFT"/>total : float<br ALIGN="LEFT"/>user : float<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"glances.plugins.alert.PluginModel" [color="black", fontcolor="black", label=<{PluginModel|align : str<br ALIGN="LEFT"/>display_curse : bool<br ALIGN="LEFT"/>stats<br ALIGN="LEFT"/>|add_duration(ret, alert)<br ALIGN="LEFT"/>add_infos(ret, alert)<br ALIGN="LEFT"/>add_min_mean_max(ret, alert)<br ALIGN="LEFT"/>add_new_line(ret, alert)<br ALIGN="LEFT"/>add_start_time(ret, alert)<br ALIGN="LEFT"/>add_top_proc(ret, alert)<br ALIGN="LEFT"/>approx_equal(a, b, tolerance)<br ALIGN="LEFT"/>build_hdr_msg(ret)<br ALIGN="LEFT"/>loop_over_alert(init, alert)<br ALIGN="LEFT"/>msg_curse(args, max_width)<br ALIGN="LEFT"/>update()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"glances.plugins.amps.PluginModel" [color="black", fontcolor="black", label=<{PluginModel|args : NoneType<br ALIGN="LEFT"/>config : NoneType<br ALIGN="LEFT"/>display_curse : bool<br ALIGN="LEFT"/>glances_amps<br ALIGN="LEFT"/>stats<br ALIGN="LEFT"/>|get_alert(nbprocess, countmin, countmax, header, log)<br ALIGN="LEFT"/>get_key()<br ALIGN="LEFT"/>msg_curse(args, max_width)<br ALIGN="LEFT"/>update()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"glances.plugins.cloud.PluginModel" [color="black", fontcolor="black", label=<{PluginModel|OPENSTACK<br ALIGN="LEFT"/>OPENSTACKEC2<br ALIGN="LEFT"/>display_curse : bool<br ALIGN="LEFT"/>stats : dict<br ALIGN="LEFT"/>|exit()<br ALIGN="LEFT"/>msg_curse(args, max_width)<br ALIGN="LEFT"/>update()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"glances.plugins.connections.PluginModel" [color="black", fontcolor="black", label=<{PluginModel|conntrack : dict<br ALIGN="LEFT"/>display_curse : bool<br ALIGN="LEFT"/>initiated_states : list<br ALIGN="LEFT"/>stats<br ALIGN="LEFT"/>status_list : list<br ALIGN="LEFT"/>terminated_states : list<br ALIGN="LEFT"/>|msg_curse(args, max_width)<br ALIGN="LEFT"/>update()<br ALIGN="LEFT"/>update_views()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"glances.plugins.containers.PluginModel" [color="black", fontcolor="black", label=<{PluginModel|args : NoneType<br ALIGN="LEFT"/>config : NoneType<br ALIGN="LEFT"/>display_curse : bool<br ALIGN="LEFT"/>sort_key : NoneType, str<br ALIGN="LEFT"/>stats<br ALIGN="LEFT"/>watchers : Dict[str, ContainersExtension]<br ALIGN="LEFT"/>|add_msg_to_line(ret, msg)<br ALIGN="LEFT"/>build_cmd_line(ret, container)<br ALIGN="LEFT"/>build_container_data(name_max_width, args)<br ALIGN="LEFT"/>build_container_name(name_max_width)<br ALIGN="LEFT"/>build_cpu_line(ret, container)<br ALIGN="LEFT"/>build_data_line(name_max_width, args)<br ALIGN="LEFT"/>build_header(ret, name_max_width)<br ALIGN="LEFT"/>build_io_line(ret, container)<br ALIGN="LEFT"/>build_memory_line(ret, container)<br ALIGN="LEFT"/>build_net_line(args)<br ALIGN="LEFT"/>build_status_name(ret, container)<br ALIGN="LEFT"/>build_title(ret)<br ALIGN="LEFT"/>build_uptime_line(ret, container)<br ALIGN="LEFT"/>container_alert(status: str): str<br ALIGN="LEFT"/>exit(): None<br ALIGN="LEFT"/>get_export(): List[Dict]<br ALIGN="LEFT"/>get_key(): str<br ALIGN="LEFT"/>get_max_of_container_names()<br ALIGN="LEFT"/>maybe_add_engine_name_or_pod_line(ret)<br ALIGN="LEFT"/>maybe_add_engine_name_or_pod_name(ret, container)<br ALIGN="LEFT"/>memory_usage_no_cache(mem: Dict[str, float]): float<br ALIGN="LEFT"/>msg_curse(args, max_width: Optional[int]): List[str]<br ALIGN="LEFT"/>update(): List[Dict]<br ALIGN="LEFT"/>update_views(): bool<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"glances.plugins.core.PluginModel" [color="black", fontcolor="black", label=<{PluginModel|display_curse : bool<br ALIGN="LEFT"/>stats<br ALIGN="LEFT"/>|update()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"glances.plugins.cpu.PluginModel" [color="black", fontcolor="black", label=<{PluginModel|display_curse : bool<br ALIGN="LEFT"/>nb_log_core : int<br ALIGN="LEFT"/>stats : NoneType, dict<br ALIGN="LEFT"/>|msg_curse(args, max_width)<br ALIGN="LEFT"/>update()<br ALIGN="LEFT"/>update_local()<br ALIGN="LEFT"/>update_snmp()<br ALIGN="LEFT"/>update_views()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"glances.plugins.diskio.PluginModel" [color="black", fontcolor="black", label=<{PluginModel|display_curse : bool<br ALIGN="LEFT"/>hide_zero : bool<br ALIGN="LEFT"/>hide_zero_fields : list<br ALIGN="LEFT"/>stats<br ALIGN="LEFT"/>|get_key()<br ALIGN="LEFT"/>msg_curse(args, max_width)<br ALIGN="LEFT"/>update()<br ALIGN="LEFT"/>update_local()<br ALIGN="LEFT"/>update_views()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"glances.plugins.folders.PluginModel" [color="black", fontcolor="black", label=<{PluginModel|args : NoneType<br ALIGN="LEFT"/>config : NoneType<br ALIGN="LEFT"/>display_curse : bool<br ALIGN="LEFT"/>glances_folders<br ALIGN="LEFT"/>stats : list<br ALIGN="LEFT"/>|get_alert(stat, header)<br ALIGN="LEFT"/>get_key()<br ALIGN="LEFT"/>msg_curse(args, max_width)<br ALIGN="LEFT"/>update()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"glances.plugins.fs.PluginModel" [color="black", fontcolor="black", label=<{PluginModel|display_curse : bool<br ALIGN="LEFT"/>stats<br ALIGN="LEFT"/>|get_key()<br ALIGN="LEFT"/>msg_curse(args, max_width)<br ALIGN="LEFT"/>update()<br ALIGN="LEFT"/>update_local()<br ALIGN="LEFT"/>update_snmp()<br ALIGN="LEFT"/>update_views()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"glances.plugins.gpu.PluginModel" [color="black", fontcolor="black", label=<{PluginModel|amd<br ALIGN="LEFT"/>display_curse : bool<br ALIGN="LEFT"/>nvidia<br ALIGN="LEFT"/>stats<br ALIGN="LEFT"/>|exit()<br ALIGN="LEFT"/>get_key()<br ALIGN="LEFT"/>msg_curse(args, max_width)<br ALIGN="LEFT"/>update()<br ALIGN="LEFT"/>update_views()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"glances.plugins.help.PluginModel" [color="black", fontcolor="black", label=<{PluginModel|args : NoneType<br ALIGN="LEFT"/>config : NoneType<br ALIGN="LEFT"/>display_curse : bool<br ALIGN="LEFT"/>view_data : dict<br ALIGN="LEFT"/>|generate_view_data()<br ALIGN="LEFT"/>get_view_data(args)<br ALIGN="LEFT"/>msg_curse(args, max_width)<br ALIGN="LEFT"/><I>reset</I>()<br ALIGN="LEFT"/><I>update</I>()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"glances.plugins.ip.PluginModel" [color="black", fontcolor="black", label=<{PluginModel|display_curse : bool<br ALIGN="LEFT"/>public_address : str<br ALIGN="LEFT"/>public_address_refresh_interval : int<br ALIGN="LEFT"/>public_api<br ALIGN="LEFT"/>public_disabled<br ALIGN="LEFT"/>public_field : list<br ALIGN="LEFT"/>public_info : NoneType, str<br ALIGN="LEFT"/>public_password<br ALIGN="LEFT"/>public_template<br ALIGN="LEFT"/>public_username<br ALIGN="LEFT"/>stats<br ALIGN="LEFT"/>|ip_to_cidr(ip)<br ALIGN="LEFT"/>msg_curse(args, max_width)<br ALIGN="LEFT"/>public_info_for_human(public_info)<br ALIGN="LEFT"/>update()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"glances.plugins.irq.PluginModel" [color="black", fontcolor="black", label=<{PluginModel|display_curse : bool<br ALIGN="LEFT"/>irq<br ALIGN="LEFT"/>stats<br ALIGN="LEFT"/>|get_key()<br ALIGN="LEFT"/>msg_curse(args, max_width)<br ALIGN="LEFT"/>update()<br ALIGN="LEFT"/>update_views()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"glances.plugins.load.PluginModel" [color="black", fontcolor="black", label=<{PluginModel|display_curse : bool<br ALIGN="LEFT"/>stats : dict<br ALIGN="LEFT"/>|msg_curse(args, max_width)<br ALIGN="LEFT"/>update()<br ALIGN="LEFT"/>update_views()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"glances.plugins.mem.PluginModel" [color="black", fontcolor="black", label=<{PluginModel|display_curse : bool<br ALIGN="LEFT"/>stats : dict<br ALIGN="LEFT"/>|msg_curse(args, max_width)<br ALIGN="LEFT"/>update()<br ALIGN="LEFT"/>update_views()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"glances.plugins.memswap.PluginModel" [color="black", fontcolor="black", label=<{PluginModel|display_curse : bool<br ALIGN="LEFT"/>stats : dict<br ALIGN="LEFT"/>|msg_curse(args, max_width)<br ALIGN="LEFT"/>update()<br ALIGN="LEFT"/>update_views()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"glances.plugins.network.PluginModel" [color="black", fontcolor="black", label=<{PluginModel|display_curse : bool<br ALIGN="LEFT"/>hide_no_ip<br ALIGN="LEFT"/>hide_no_up<br ALIGN="LEFT"/>hide_zero : bool<br ALIGN="LEFT"/>hide_zero_fields : list<br ALIGN="LEFT"/>stats : NoneType<br ALIGN="LEFT"/>|get_key()<br ALIGN="LEFT"/>msg_curse(args, max_width)<br ALIGN="LEFT"/>update()<br ALIGN="LEFT"/>update_local()<br ALIGN="LEFT"/>update_views()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"glances.plugins.now.PluginModel" [color="black", fontcolor="black", label=<{PluginModel|align : str<br ALIGN="LEFT"/>display_curse : bool<br ALIGN="LEFT"/>stats<br ALIGN="LEFT"/>strftime<br ALIGN="LEFT"/>|msg_curse(args, max_width)<br ALIGN="LEFT"/>update()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"glances.plugins.percpu.PluginModel" [color="black", fontcolor="black", label=<{PluginModel|display_curse : bool<br ALIGN="LEFT"/>max_cpu_display : int<br ALIGN="LEFT"/>stats<br ALIGN="LEFT"/>|define_headers_from_os()<br ALIGN="LEFT"/>display_cpu_header_in_columns(cpu, return_)<br ALIGN="LEFT"/>display_cpu_stats_in_columns(cpu, header, return_)<br ALIGN="LEFT"/>display_cpu_stats_per_line(header, return_)<br ALIGN="LEFT"/>get_key()<br ALIGN="LEFT"/>manage_max_cpu_to_display()<br ALIGN="LEFT"/>maybe_build_string_msg(header, return_)<br ALIGN="LEFT"/>msg_curse(args, max_width)<br ALIGN="LEFT"/>summarize_all_cpus_not_displayed(percpu_list, header, return_)<br ALIGN="LEFT"/>update()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"glances.plugins.ports.PluginModel" [color="black", fontcolor="black", label=<{PluginModel|args : NoneType<br ALIGN="LEFT"/>config : NoneType<br ALIGN="LEFT"/>display_curse : bool<br ALIGN="LEFT"/>stats : list<br ALIGN="LEFT"/>|build_str(name_max_width, ret, p)<br ALIGN="LEFT"/>exit()<br ALIGN="LEFT"/>get_conds_if_port(port)<br ALIGN="LEFT"/>get_conds_if_url(web)<br ALIGN="LEFT"/>get_default_ret_value(conds)<br ALIGN="LEFT"/>get_key()<br ALIGN="LEFT"/>get_p_alert(conds, p, header, log)<br ALIGN="LEFT"/>get_ports_alert(port, header, log)<br ALIGN="LEFT"/>get_status_and_helper(p)<br ALIGN="LEFT"/>get_web_alert(web, header, log)<br ALIGN="LEFT"/>msg_curse(args, max_width)<br ALIGN="LEFT"/>set_status_if_host(p)<br ALIGN="LEFT"/>set_status_if_url(p)<br ALIGN="LEFT"/>update()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"glances.plugins.processcount.PluginModel" [color="black", fontcolor="black", label=<{PluginModel|display_curse : bool<br ALIGN="LEFT"/>stats : dict<br ALIGN="LEFT"/>|disable_extended()<br ALIGN="LEFT"/>enable_extended()<br ALIGN="LEFT"/>msg_curse(args, max_width)<br ALIGN="LEFT"/>update()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"glances.plugins.processlist.PluginModel" [color="black", fontcolor="black", label=<{PluginModel|display_curse : bool<br ALIGN="LEFT"/>layout_header : dict<br ALIGN="LEFT"/>layout_stat : dict<br ALIGN="LEFT"/>max_values : dict<br ALIGN="LEFT"/>mmm_max : dict<br ALIGN="LEFT"/>mmm_min : dict<br ALIGN="LEFT"/>nb_log_core : int<br ALIGN="LEFT"/>pid_max : NoneType, int<br ALIGN="LEFT"/>stats : list<br ALIGN="LEFT"/>tag_proc_time : bool<br ALIGN="LEFT"/>|add_cpu_line(ret, prog)<br ALIGN="LEFT"/>add_io_and_network_lines(ret, prog)<br ALIGN="LEFT"/>add_ionice_line(headers, default)<br ALIGN="LEFT"/>add_memory_info_lines(ret, prog)<br ALIGN="LEFT"/>add_memory_line(ret, prog)<br ALIGN="LEFT"/>add_title_line(ret, prog)<br ALIGN="LEFT"/>get_export()<br ALIGN="LEFT"/>get_headers(k)<br ALIGN="LEFT"/>get_key()<br ALIGN="LEFT"/>get_nice_alert(value)<br ALIGN="LEFT"/>get_process_curses_data(p, selected, args)<br ALIGN="LEFT"/>is_selected_process(args)<br ALIGN="LEFT"/>maybe_add_cpu_affinity_line(ret, prog)<br ALIGN="LEFT"/>maybe_add_ionice_line(ret, prog)<br ALIGN="LEFT"/>maybe_add_memory_swap_line(ret, prog)<br ALIGN="LEFT"/>msg_curse(args, max_width)<br ALIGN="LEFT"/>update()<br ALIGN="LEFT"/>update_local()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"glances.plugins.psutilversion.PluginModel" [color="black", fontcolor="black", label=<{PluginModel|stats : NoneType, str<br ALIGN="LEFT"/>|reset()<br ALIGN="LEFT"/>update()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"glances.plugins.quicklook.PluginModel" [color="black", fontcolor="black", label=<{PluginModel|AVAILABLE_STATS_LIST : list<br ALIGN="LEFT"/>DEFAULT_STATS_LIST : list<br ALIGN="LEFT"/>display_curse : bool<br ALIGN="LEFT"/>max_cpu_display : int<br ALIGN="LEFT"/>stats<br ALIGN="LEFT"/>stats_list : list<br ALIGN="LEFT"/>|msg_curse(args, max_width)<br ALIGN="LEFT"/>update()<br ALIGN="LEFT"/>update_views()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"glances.plugins.raid.PluginModel" [color="black", fontcolor="black", label=<{PluginModel|display_curse : bool<br ALIGN="LEFT"/>stats<br ALIGN="LEFT"/>|msg_curse(args, max_width)<br ALIGN="LEFT"/>raid_alert(status, used, available, raid_type): str<br ALIGN="LEFT"/>update()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"glances.plugins.sensors.PluginModel" [color="black", fontcolor="black", label=<{PluginModel|display_curse : bool<br ALIGN="LEFT"/>sensors_grab_map : Dict[SensorType, Any]<br ALIGN="LEFT"/>stats<br ALIGN="LEFT"/>|battery_trend(stats)<br ALIGN="LEFT"/>get_key()<br ALIGN="LEFT"/>msg_curse(args, max_width)<br ALIGN="LEFT"/>update()<br ALIGN="LEFT"/>update_views()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"glances.plugins.sensors.sensor.glances_batpercent.PluginModel" [color="black", fontcolor="black", label=<{PluginModel|display_curse : bool<br ALIGN="LEFT"/>glances_grab_bat<br ALIGN="LEFT"/>stats : list<br ALIGN="LEFT"/>|update()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"glances.plugins.sensors.sensor.glances_hddtemp.PluginModel" [color="black", fontcolor="black", label=<{PluginModel|display_curse : bool<br ALIGN="LEFT"/>hddtemp<br ALIGN="LEFT"/>stats : list<br ALIGN="LEFT"/>|update()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"glances.plugins.smart.PluginModel" [color="black", fontcolor="black", label=<{PluginModel|display_curse : bool<br ALIGN="LEFT"/>stats : list<br ALIGN="LEFT"/>|get_key()<br ALIGN="LEFT"/>msg_curse(args, max_width)<br ALIGN="LEFT"/>update()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"glances.plugins.system.PluginModel" [color="black", fontcolor="black", label=<{PluginModel|display_curse : bool<br ALIGN="LEFT"/>stats : dict<br ALIGN="LEFT"/>system_info_msg : NoneType<br ALIGN="LEFT"/>|add_human_readable_name(stats)<br ALIGN="LEFT"/>get_linux_version_and_distro()<br ALIGN="LEFT"/>get_stats_from_std_sys_lib(stats)<br ALIGN="LEFT"/>get_win_version_and_platform(stats)<br ALIGN="LEFT"/>msg_curse(args, max_width)<br ALIGN="LEFT"/>update()<br ALIGN="LEFT"/>update_stats_with_snmp()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"glances.plugins.uptime.PluginModel" [color="black", fontcolor="black", label=<{PluginModel|align : str<br ALIGN="LEFT"/>display_curse : bool<br ALIGN="LEFT"/>stats : str<br ALIGN="LEFT"/>uptime<br ALIGN="LEFT"/>|get_export()<br ALIGN="LEFT"/>msg_curse(args, max_width)<br ALIGN="LEFT"/>update()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"glances.plugins.version.PluginModel" [color="black", fontcolor="black", label=<{PluginModel|stats : NoneType, str<br ALIGN="LEFT"/>|reset()<br ALIGN="LEFT"/>update()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"glances.plugins.vms.PluginModel" [color="black", fontcolor="black", label=<{PluginModel|args : NoneType<br ALIGN="LEFT"/>config : NoneType<br ALIGN="LEFT"/>display_curse : bool<br ALIGN="LEFT"/>sort_key : NoneType, str<br ALIGN="LEFT"/>stats<br ALIGN="LEFT"/>watchers : Dict[str, VmsExtension]<br ALIGN="LEFT"/>|get_export(): List[Dict]<br ALIGN="LEFT"/>get_key(): str<br ALIGN="LEFT"/>msg_curse(args, max_width: Optional[int]): List[str]<br ALIGN="LEFT"/>update(): List[Dict]<br ALIGN="LEFT"/>update_views(): bool<br ALIGN="LEFT"/>vm_alert(status: str): str<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"glances.plugins.wifi.PluginModel" [color="black", fontcolor="black", label=<{PluginModel|display_curse : bool<br ALIGN="LEFT"/>stats<br ALIGN="LEFT"/>|exit()<br ALIGN="LEFT"/>get_alert(value)<br ALIGN="LEFT"/>get_key()<br ALIGN="LEFT"/>msg_curse(args, max_width)<br ALIGN="LEFT"/>update()<br ALIGN="LEFT"/>update_views()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"glances.plugins.containers.engines.podman.PodmanContainerStatsFetcher" [color="black", fontcolor="black", label=<{PodmanContainerStatsFetcher|MANDATORY_FIELDS : list<br ALIGN="LEFT"/>activity_stats<br ALIGN="LEFT"/>time_since_update<br ALIGN="LEFT"/>|get_streamed_stats(): Dict[str, Any]<br ALIGN="LEFT"/>stop()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"glances.plugins.containers.engines.podman.PodmanExtension" [color="black", fontcolor="black", label=<{PodmanExtension|CONTAINER_ACTIVE_STATUS : list<br ALIGN="LEFT"/>client : NoneType<br ALIGN="LEFT"/>container_stats_fetchers : dict<br ALIGN="LEFT"/>ext_name : str<br ALIGN="LEFT"/>key<br ALIGN="LEFT"/>podman_sock<br ALIGN="LEFT"/>pods_stats_fetcher : NoneType<br ALIGN="LEFT"/>|connect()<br ALIGN="LEFT"/>generate_stats(container): Dict[str, Any]<br ALIGN="LEFT"/>stop(): None<br ALIGN="LEFT"/>update(all_tag): Tuple[Dict, list[Dict[str, Any]]]<br ALIGN="LEFT"/>update_version()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"glances.plugins.containers.engines.podman.PodmanPodStatsFetcher" [color="black", fontcolor="black", label=<{PodmanPodStatsFetcher|activity_stats<br ALIGN="LEFT"/>|stop()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"glances.plugins.ip.PublicIpInfo" [color="black", fontcolor="black", label=<{PublicIpInfo|password<br ALIGN="LEFT"/>timeout : int<br ALIGN="LEFT"/>url<br ALIGN="LEFT"/>username<br ALIGN="LEFT"/>|get()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"glances.plugins.sensors.SensorType" [color="black", fontcolor="black", label=<{SensorType|name<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"glances.outputs.glances_sparklines.Sparkline" [color="black", fontcolor="black", label=<{Sparkline|available<br ALIGN="LEFT"/>percents<br ALIGN="LEFT"/>post_char<br ALIGN="LEFT"/>pre_char<br ALIGN="LEFT"/>size<br ALIGN="LEFT"/>|get(overwrite)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"glances.plugins.cloud.ThreadOpenStack" [color="black", fontcolor="black", label=<{ThreadOpenStack|OPENSTACK_API_METADATA : dict<br ALIGN="LEFT"/>OPENSTACK_API_URL : str<br ALIGN="LEFT"/>OPENSTACK_PLATFORM : str<br ALIGN="LEFT"/>stats<br ALIGN="LEFT"/>|run()<br ALIGN="LEFT"/>stop(timeout)<br ALIGN="LEFT"/>stopped()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"glances.plugins.cloud.ThreadOpenStackEC2" [color="black", fontcolor="black", label=<{ThreadOpenStackEC2|OPENSTACK_API_METADATA : dict<br ALIGN="LEFT"/>OPENSTACK_API_URL : str<br ALIGN="LEFT"/>OPENSTACK_PLATFORM : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"glances.plugins.ports.ThreadScanner" [color="black", fontcolor="black", label=<{ThreadScanner|plugin_name : str<br ALIGN="LEFT"/>stats<br ALIGN="LEFT"/>|get_key()<br ALIGN="LEFT"/>run()<br ALIGN="LEFT"/>stop(timeout)<br ALIGN="LEFT"/>stopped()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"glances.stats_streamer.ThreadedIterableStreamer" [color="black", fontcolor="black", label=<{ThreadedIterableStreamer|last_update_time<br ALIGN="LEFT"/>result_lock : lock<br ALIGN="LEFT"/>stats<br ALIGN="LEFT"/>|stop()<br ALIGN="LEFT"/>stopped()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"glances.timer.Timer" [color="black", fontcolor="black", label=<{Timer|duration<br ALIGN="LEFT"/>target<br ALIGN="LEFT"/>|finished()<br ALIGN="LEFT"/>get()<br ALIGN="LEFT"/>reset(duration)<br ALIGN="LEFT"/>set(duration)<br ALIGN="LEFT"/>start()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"glances.plugins.vms.engines.multipass.VmExtension" [color="black", fontcolor="black", label=<{VmExtension|CONTAINER_ACTIVE_STATUS : list<br ALIGN="LEFT"/>ext_name : str<br ALIGN="LEFT"/>key<br ALIGN="LEFT"/>|generate_stats(vm_name, vm_stats): Dict[str, Any]<br ALIGN="LEFT"/>update(all_tag): Tuple[Dict, List[Dict]]<br ALIGN="LEFT"/>update_info()<br ALIGN="LEFT"/>update_version()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"glances.plugins.vms.engines.VmsExtension" [color="black", fontcolor="black", label=<{VmsExtension|<br ALIGN="LEFT"/>|<I>stop</I>(): None<br ALIGN="LEFT"/><I>update</I>(all_tag): Tuple[Dict, List[Dict[str, Any]]]<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"glances.outputs.glances_curses._GlancesCurses" [color="black", fontcolor="black", label=<{_GlancesCurses|args : NoneType<br ALIGN="LEFT"/>colors_list : dict<br ALIGN="LEFT"/>column : int<br ALIGN="LEFT"/>config : NoneType<br ALIGN="LEFT"/>decrease_nice_process : bool<br ALIGN="LEFT"/>edit_filter : bool<br ALIGN="LEFT"/>increase_nice_process : bool<br ALIGN="LEFT"/>kill_process : bool<br ALIGN="LEFT"/>line : int<br ALIGN="LEFT"/>next_column : int<br ALIGN="LEFT"/>next_line : int<br ALIGN="LEFT"/>pressedkey : int<br ALIGN="LEFT"/>reset_history_tag : bool<br ALIGN="LEFT"/>saved_line : int<br ALIGN="LEFT"/>screen<br ALIGN="LEFT"/>space_between_column : int<br ALIGN="LEFT"/>space_between_line : int<br ALIGN="LEFT"/>term_h : int<br ALIGN="LEFT"/>term_w : int<br ALIGN="LEFT"/>term_window<br ALIGN="LEFT"/>|catch_actions_from_hotkey(hotkey)<br ALIGN="LEFT"/>catch_other_actions_maybe_return_to_browser(return_to_browser)<br ALIGN="LEFT"/>clear()<br ALIGN="LEFT"/>disable_fullquicklook()<br ALIGN="LEFT"/>disable_top()<br ALIGN="LEFT"/>display(stats, cs_status)<br ALIGN="LEFT"/>display_plugin(plugin_stats, display_optional, display_additional, max_y, add_space)<br ALIGN="LEFT"/>display_popup(message, size_x, size_y, duration, popup_type, input_size, input_value, is_password)<br ALIGN="LEFT"/>display_stats(plugin_stats, init, helper)<br ALIGN="LEFT"/>display_stats_with_current_size(m, y, x)<br ALIGN="LEFT"/>enable_fullquicklook()<br ALIGN="LEFT"/>enable_top()<br ALIGN="LEFT"/>end()<br ALIGN="LEFT"/>erase()<br ALIGN="LEFT"/>flush(stats, cs_status)<br ALIGN="LEFT"/>get_key(window)<br ALIGN="LEFT"/>get_next_x_and_x_max(m, x, x_max)<br ALIGN="LEFT"/>get_stats_display_height(curse_msg)<br ALIGN="LEFT"/>get_stats_display_width(curse_msg, without_option)<br ALIGN="LEFT"/>init_column()<br ALIGN="LEFT"/>init_line()<br ALIGN="LEFT"/>init_line_column()<br ALIGN="LEFT"/>kill(process)<br ALIGN="LEFT"/>load_config(config)<br ALIGN="LEFT"/>loop_position()<br ALIGN="LEFT"/>new_column()<br ALIGN="LEFT"/>new_line(separator)<br ALIGN="LEFT"/>nice_decrease(process)<br ALIGN="LEFT"/>nice_increase(process)<br ALIGN="LEFT"/>refresh()<br ALIGN="LEFT"/>separator_line(color)<br ALIGN="LEFT"/>set_cursor(value)<br ALIGN="LEFT"/>setup_upper_left_pos(plugin_stats)<br ALIGN="LEFT"/>update(stats, duration, cs_status, return_to_browser)<br ALIGN="LEFT"/>wait(delay)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"glances.thresholds._GlancesThreshold" [color="black", fontcolor="black", label=<{_GlancesThreshold|<br ALIGN="LEFT"/>|description()<br ALIGN="LEFT"/>value()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"glances.outputs.glances_stdout_issue.colors" [color="black", fontcolor="black", label=<{colors|BLUE : str<br ALIGN="LEFT"/>GREEN : str<br ALIGN="LEFT"/>NO : str<br ALIGN="LEFT"/>ORANGE : str<br ALIGN="LEFT"/>RED : str<br ALIGN="LEFT"/>|disable()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"glances.amps.default.Amp" -> "glances.amps.amp.GlancesAmp" [arrowhead="empty", arrowtail="none"];
"glances.amps.nginx.Amp" -> "glances.amps.amp.GlancesAmp" [arrowhead="empty", arrowtail="none"];
"glances.amps.systemd.Amp" -> "glances.amps.amp.GlancesAmp" [arrowhead="empty", arrowtail="none"];
"glances.amps.systemv.Amp" -> "glances.amps.amp.GlancesAmp" [arrowhead="empty", arrowtail="none"];
"glances.exports.glances_cassandra.Export" -> "glances.exports.export.GlancesExport" [arrowhead="empty", arrowtail="none"];
"glances.exports.glances_couchdb.Export" -> "glances.exports.export.GlancesExport" [arrowhead="empty", arrowtail="none"];
"glances.exports.glances_csv.Export" -> "glances.exports.export.GlancesExport" [arrowhead="empty", arrowtail="none"];
"glances.exports.glances_elasticsearch.Export" -> "glances.exports.export.GlancesExport" [arrowhead="empty", arrowtail="none"];
"glances.exports.glances_graph.Export" -> "glances.exports.export.GlancesExport" [arrowhead="empty", arrowtail="none"];
"glances.exports.glances_graphite.Export" -> "glances.exports.export.GlancesExport" [arrowhead="empty", arrowtail="none"];
"glances.exports.glances_influxdb.Export" -> "glances.exports.export.GlancesExport" [arrowhead="empty", arrowtail="none"];
"glances.exports.glances_influxdb2.Export" -> "glances.exports.export.GlancesExport" [arrowhead="empty", arrowtail="none"];
"glances.exports.glances_json.Export" -> "glances.exports.export.GlancesExport" [arrowhead="empty", arrowtail="none"];
"glances.exports.glances_kafka.Export" -> "glances.exports.export.GlancesExport" [arrowhead="empty", arrowtail="none"];
"glances.exports.glances_mongodb.Export" -> "glances.exports.export.GlancesExport" [arrowhead="empty", arrowtail="none"];
"glances.exports.glances_mqtt.Export" -> "glances.exports.export.GlancesExport" [arrowhead="empty", arrowtail="none"];
"glances.exports.glances_opentsdb.Export" -> "glances.exports.export.GlancesExport" [arrowhead="empty", arrowtail="none"];
"glances.exports.glances_prometheus.Export" -> "glances.exports.export.GlancesExport" [arrowhead="empty", arrowtail="none"];
"glances.exports.glances_rabbitmq.Export" -> "glances.exports.export.GlancesExport" [arrowhead="empty", arrowtail="none"];
"glances.exports.glances_restful.Export" -> "glances.exports.export.GlancesExport" [arrowhead="empty", arrowtail="none"];
"glances.exports.glances_riemann.Export" -> "glances.exports.export.GlancesExport" [arrowhead="empty", arrowtail="none"];
"glances.exports.glances_statsd.Export" -> "glances.exports.export.GlancesExport" [arrowhead="empty", arrowtail="none"];
"glances.exports.glances_zeromq.Export" -> "glances.exports.export.GlancesExport" [arrowhead="empty", arrowtail="none"];
"glances.outputs.glances_curses.GlancesCursesClient" -> "glances.outputs.glances_curses._GlancesCurses" [arrowhead="empty", arrowtail="none"];
"glances.outputs.glances_curses.GlancesCursesStandalone" -> "glances.outputs.glances_curses._GlancesCurses" [arrowhead="empty", arrowtail="none"];
"glances.outputs.glances_curses_browser.GlancesCursesBrowser" -> "glances.outputs.glances_curses._GlancesCurses" [arrowhead="empty", arrowtail="none"];
"glances.password_list.GlancesPasswordList" -> "glances.password.GlancesPassword" [arrowhead="empty", arrowtail="none"];
"glances.plugins.alert.PluginModel" -> "glances.plugins.plugin.model.GlancesPluginModel" [arrowhead="empty", arrowtail="none"];
"glances.plugins.amps.PluginModel" -> "glances.plugins.plugin.model.GlancesPluginModel" [arrowhead="empty", arrowtail="none"];
"glances.plugins.cloud.PluginModel" -> "glances.plugins.plugin.model.GlancesPluginModel" [arrowhead="empty", arrowtail="none"];
"glances.plugins.cloud.ThreadOpenStackEC2" -> "glances.plugins.cloud.ThreadOpenStack" [arrowhead="empty", arrowtail="none"];
"glances.plugins.connections.PluginModel" -> "glances.plugins.plugin.model.GlancesPluginModel" [arrowhead="empty", arrowtail="none"];
"glances.plugins.containers.PluginModel" -> "glances.plugins.plugin.model.GlancesPluginModel" [arrowhead="empty", arrowtail="none"];
"glances.plugins.core.PluginModel" -> "glances.plugins.plugin.model.GlancesPluginModel" [arrowhead="empty", arrowtail="none"];
"glances.plugins.cpu.PluginModel" -> "glances.plugins.plugin.model.GlancesPluginModel" [arrowhead="empty", arrowtail="none"];
"glances.plugins.diskio.PluginModel" -> "glances.plugins.plugin.model.GlancesPluginModel" [arrowhead="empty", arrowtail="none"];
"glances.plugins.folders.PluginModel" -> "glances.plugins.plugin.model.GlancesPluginModel" [arrowhead="empty", arrowtail="none"];
"glances.plugins.fs.PluginModel" -> "glances.plugins.plugin.model.GlancesPluginModel" [arrowhead="empty", arrowtail="none"];
"glances.plugins.gpu.PluginModel" -> "glances.plugins.plugin.model.GlancesPluginModel" [arrowhead="empty", arrowtail="none"];
"glances.plugins.help.PluginModel" -> "glances.plugins.plugin.model.GlancesPluginModel" [arrowhead="empty", arrowtail="none"];
"glances.plugins.ip.PluginModel" -> "glances.plugins.plugin.model.GlancesPluginModel" [arrowhead="empty", arrowtail="none"];
"glances.plugins.irq.PluginModel" -> "glances.plugins.plugin.model.GlancesPluginModel" [arrowhead="empty", arrowtail="none"];
"glances.plugins.load.PluginModel" -> "glances.plugins.plugin.model.GlancesPluginModel" [arrowhead="empty", arrowtail="none"];
"glances.plugins.mem.PluginModel" -> "glances.plugins.plugin.model.GlancesPluginModel" [arrowhead="empty", arrowtail="none"];
"glances.plugins.memswap.PluginModel" -> "glances.plugins.plugin.model.GlancesPluginModel" [arrowhead="empty", arrowtail="none"];
"glances.plugins.network.PluginModel" -> "glances.plugins.plugin.model.GlancesPluginModel" [arrowhead="empty", arrowtail="none"];
"glances.plugins.now.PluginModel" -> "glances.plugins.plugin.model.GlancesPluginModel" [arrowhead="empty", arrowtail="none"];
"glances.plugins.percpu.PluginModel" -> "glances.plugins.plugin.model.GlancesPluginModel" [arrowhead="empty", arrowtail="none"];
"glances.plugins.ports.PluginModel" -> "glances.plugins.plugin.model.GlancesPluginModel" [arrowhead="empty", arrowtail="none"];
"glances.plugins.processcount.PluginModel" -> "glances.plugins.plugin.model.GlancesPluginModel" [arrowhead="empty", arrowtail="none"];
"glances.plugins.processlist.PluginModel" -> "glances.plugins.plugin.model.GlancesPluginModel" [arrowhead="empty", arrowtail="none"];
"glances.plugins.psutilversion.PluginModel" -> "glances.plugins.plugin.model.GlancesPluginModel" [arrowhead="empty", arrowtail="none"];
"glances.plugins.quicklook.PluginModel" -> "glances.plugins.plugin.model.GlancesPluginModel" [arrowhead="empty", arrowtail="none"];
"glances.plugins.raid.PluginModel" -> "glances.plugins.plugin.model.GlancesPluginModel" [arrowhead="empty", arrowtail="none"];
"glances.plugins.sensors.PluginModel" -> "glances.plugins.plugin.model.GlancesPluginModel" [arrowhead="empty", arrowtail="none"];
"glances.plugins.sensors.sensor.glances_batpercent.PluginModel" -> "glances.plugins.plugin.model.GlancesPluginModel" [arrowhead="empty", arrowtail="none"];
"glances.plugins.sensors.sensor.glances_hddtemp.PluginModel" -> "glances.plugins.plugin.model.GlancesPluginModel" [arrowhead="empty", arrowtail="none"];
"glances.plugins.smart.PluginModel" -> "glances.plugins.plugin.model.GlancesPluginModel" [arrowhead="empty", arrowtail="none"];
"glances.plugins.system.PluginModel" -> "glances.plugins.plugin.model.GlancesPluginModel" [arrowhead="empty", arrowtail="none"];
"glances.plugins.uptime.PluginModel" -> "glances.plugins.plugin.model.GlancesPluginModel" [arrowhead="empty", arrowtail="none"];
"glances.plugins.version.PluginModel" -> "glances.plugins.plugin.model.GlancesPluginModel" [arrowhead="empty", arrowtail="none"];
"glances.plugins.vms.PluginModel" -> "glances.plugins.plugin.model.GlancesPluginModel" [arrowhead="empty", arrowtail="none"];
"glances.plugins.wifi.PluginModel" -> "glances.plugins.plugin.model.GlancesPluginModel" [arrowhead="empty", arrowtail="none"];
"glances.stats_client.GlancesStatsClient" -> "glances.stats.GlancesStats" [arrowhead="empty", arrowtail="none"];
"glances.stats_client_snmp.GlancesStatsClientSNMP" -> "glances.stats.GlancesStats" [arrowhead="empty", arrowtail="none"];
"glances.stats_server.GlancesStatsServer" -> "glances.stats.GlancesStats" [arrowhead="empty", arrowtail="none"];
"glances.thresholds.GlancesThresholdCareful" -> "glances.thresholds._GlancesThreshold" [arrowhead="empty", arrowtail="none"];
"glances.thresholds.GlancesThresholdCritical" -> "glances.thresholds._GlancesThreshold" [arrowhead="empty", arrowtail="none"];
"glances.thresholds.GlancesThresholdOk" -> "glances.thresholds._GlancesThreshold" [arrowhead="empty", arrowtail="none"];
"glances.thresholds.GlancesThresholdWarning" -> "glances.thresholds._GlancesThreshold" [arrowhead="empty", arrowtail="none"];
"glances.actions.GlancesActions" -> "glances.plugins.plugin.model.GlancesPluginModel" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="actions", style="solid"];
"glances.amps_list.AmpsList" -> "glances.plugins.amps.PluginModel" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="glances_amps", style="solid"];
"glances.autodiscover.AutoDiscovered" -> "glances.autodiscover.GlancesAutoDiscoverListener" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="servers", style="solid"];
"glances.autodiscover.GlancesAutoDiscoverClient" -> "glances.server.GlancesServer" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="autodiscover_client", style="solid"];
"glances.autodiscover.GlancesAutoDiscoverListener" -> "glances.autodiscover.GlancesAutoDiscoverServer" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="listener", style="solid"];
"glances.autodiscover.GlancesAutoDiscoverServer" -> "glances.client_browser.GlancesClientBrowser" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="autodiscover_server", style="solid"];
"glances.config.Config" -> "glances.main.GlancesMain" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="config", style="solid"];
"glances.cpu_percent.CpuInfo" -> "glances.cpu_percent.CpuPercent" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="cpu_info", style="solid"];
"glances.filter.GlancesFilter" -> "glances.processes.GlancesProcesses" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_filter", style="solid"];
"glances.filter.GlancesFilterList" -> "glances.processes.GlancesProcesses" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_filter_export", style="solid"];
"glances.folder_list.FolderList" -> "glances.plugins.folders.PluginModel" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="glances_folders", style="solid"];
"glances.history.GlancesHistory" -> "glances.plugins.plugin.model.GlancesPluginModel" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="stats_history", style="solid"];
"glances.outdated.Outdated" -> "glances.standalone.GlancesStandalone" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="outdated", style="solid"];
"glances.outputs.glances_curses.GlancesCursesClient" -> "glances.client.GlancesClient" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="screen", style="solid"];
"glances.outputs.glances_curses.GlancesCursesStandalone" -> "glances.standalone.GlancesStandalone" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="screen", style="solid"];
"glances.outputs.glances_curses_browser.GlancesCursesBrowser" -> "glances.client_browser.GlancesClientBrowser" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="screen", style="solid"];
"glances.outputs.glances_restful_api.GlancesRestfulApi" -> "glances.webserver.GlancesWebServer" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="web", style="solid"];
"glances.outputs.glances_restful_api.GlancesUvicornServer" -> "glances.outputs.glances_restful_api.GlancesRestfulApi" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="uvicorn_server", style="solid"];
"glances.outputs.glances_stdout.GlancesStdout" -> "glances.standalone.GlancesStandalone" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="screen", style="solid"];
"glances.outputs.glances_stdout_apidoc.GlancesStdoutApiDoc" -> "glances.standalone.GlancesStandalone" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="screen", style="solid"];
"glances.outputs.glances_stdout_csv.GlancesStdoutCsv" -> "glances.standalone.GlancesStandalone" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="screen", style="solid"];
"glances.outputs.glances_stdout_issue.GlancesStdoutIssue" -> "glances.standalone.GlancesStandalone" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="screen", style="solid"];
"glances.outputs.glances_stdout_json.GlancesStdoutJson" -> "glances.standalone.GlancesStandalone" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="screen", style="solid"];
"glances.password.GlancesPassword" -> "glances.outputs.glances_restful_api.GlancesRestfulApi" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_password", style="solid"];
"glances.password_list.GlancesPasswordList" -> "glances.client_browser.GlancesClientBrowser" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="password", style="solid"];
"glances.plugins.cloud.ThreadOpenStack" -> "glances.plugins.cloud.PluginModel" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="OPENSTACK", style="solid"];
"glances.plugins.cloud.ThreadOpenStackEC2" -> "glances.plugins.cloud.PluginModel" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="OPENSTACKEC2", style="solid"];
"glances.plugins.containers.engines.podman.PodmanPodStatsFetcher" -> "glances.plugins.containers.engines.podman.PodmanExtension" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="pods_stats_fetcher", style="solid"];
"glances.plugins.gpu.cards.amd.AmdGPU" -> "glances.plugins.gpu.PluginModel" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="amd", style="solid"];
"glances.plugins.gpu.cards.nvidia.NvidiaGPU" -> "glances.plugins.gpu.PluginModel" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="nvidia", style="solid"];
"glances.plugins.irq.GlancesIRQ" -> "glances.plugins.irq.PluginModel" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="irq", style="solid"];
"glances.plugins.ports.ThreadScanner" -> "glances.plugins.ports.PluginModel" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_thread", style="solid"];
"glances.plugins.sensors.sensor.glances_batpercent.GlancesGrabBat" -> "glances.plugins.sensors.sensor.glances_batpercent.PluginModel" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="glances_grab_bat", style="solid"];
"glances.plugins.sensors.sensor.glances_hddtemp.GlancesGrabHDDTemp" -> "glances.plugins.sensors.sensor.glances_hddtemp.PluginModel" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="hddtemp", style="solid"];
"glances.server.GlancesXMLRPCServer" -> "glances.server.GlancesServer" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="server", style="solid"];
"glances.static_list.GlancesStaticServer" -> "glances.client_browser.GlancesClientBrowser" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="static_server", style="solid"];
"glances.stats.GlancesStats" -> "glances.standalone.GlancesStandalone" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="stats", style="solid"];
"glances.stats.GlancesStats" -> "glances.webserver.GlancesWebServer" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="stats", style="solid"];
"glances.stats_client.GlancesStatsClient" -> "glances.client.GlancesClient" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="stats", style="solid"];
"glances.stats_client_snmp.GlancesStatsClientSNMP" -> "glances.client.GlancesClient" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="stats", style="solid"];
"glances.stats_server.GlancesStatsServer" -> "glances.server.GlancesInstance" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="stats", style="solid"];
"glances.stats_streamer.ThreadedIterableStreamer" -> "glances.plugins.containers.engines.docker.DockerStatsFetcher" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_streamer", style="solid"];
"glances.stats_streamer.ThreadedIterableStreamer" -> "glances.plugins.containers.engines.podman.PodmanContainerStatsFetcher" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_streamer", style="solid"];
"glances.stats_streamer.ThreadedIterableStreamer" -> "glances.plugins.containers.engines.podman.PodmanPodStatsFetcher" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_streamer", style="solid"];
"glances.timer.Timer" -> "glances.actions.GlancesActions" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="start_timer", style="solid"];
"glances.timer.Timer" -> "glances.actions.GlancesActions" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="start_timer", style="solid"];
"glances.timer.Timer" -> "glances.amps.amp.GlancesAmp" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="timer", style="solid"];
"glances.timer.Timer" -> "glances.cpu_percent.CpuPercent" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="timer_cpu_info", style="solid"];
"glances.timer.Timer" -> "glances.cpu_percent.CpuPercent" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="timer_cpu", style="solid"];
"glances.timer.Timer" -> "glances.cpu_percent.CpuPercent" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="timer_percpu", style="solid"];
"glances.timer.Timer" -> "glances.exports.glances_graph.Export" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_timer", style="solid"];
"glances.timer.Timer" -> "glances.outputs.glances_restful_api.GlancesRestfulApi" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="timer", style="solid"];
"glances.timer.Timer" -> "glances.outputs.glances_restful_api.GlancesRestfulApi" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="timer", style="solid"];
"glances.timer.Timer" -> "glances.plugins.plugin.model.GlancesPluginModel" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="refresh_timer", style="solid"];
"glances.timer.Timer" -> "glances.processes.GlancesProcesses" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="cache_timer", style="solid"];
"glances.timer.Timer" -> "glances.processes.GlancesProcesses" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="cache_timer", style="solid"];
"glances.timer.Timer" -> "glances.server.GlancesInstance" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="timer", style="solid"];
"glances.timer.Timer" -> "glances.server.GlancesInstance" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="timer", style="solid"];
"glances.stats.GlancesStats" -> "glances.outputs.glances_restful_api.GlancesRestfulApi" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="stats", style="solid"];
}
